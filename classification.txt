

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('/content/LAB 2 DATASET - LAB 2 DATASET.csv')
df.head()
df.shape
df=df.drop('Serial No.',axis=1)
df.shape
df.info()
df['Chance of Admit']=[1 if each >0.75 else 0 for each in df['Chance of Admit']]
df.head()
x=df[['GRE Score','TOEFL Score','University Rating','SOP','LOR','CGPA','Research']]
y=df['Chance of Admit']
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LogisticRegression
model_dt=DecisionTreeRegressor(random_state=1)#int
model_rf=RandomForestRegressor(random_state=1)#float
model_lr=LogisticRegression(random_state=1,solver='lbfgs',max_iter=1000)#
model_dt.fit(x_train,y_train)
model_rf.fit(x_train,y_train)
model_lr.fit(x_train,y_train)
y_pred_dt=model_dt.predict(x_test)
y_pred_rf=model_rf.predict(x_test)
y_pred_lr=model_lr.predict(x_test)
from sklearn.metrics import ConfusionMatrixDisplay,accuracy_score
from sklearn.metrics import classification_report

sns.regplot(x='GRE Score' , y='TOEFL Score',data=df)
plt.title('GRE Score vs TOEFL Score')

plt.show()
ConfusionMatrixDisplay.from_predictions(y_test,y_pred_dt)
plt.title("Decision Tree")
plt.show()
print(f"Accuracy is {accuracy_score(y_test,y_pred_dt)}")
print(classification_report(y_test,y_pred_dt))
ConfusionMatrixDisplay.from_predictions(y_test,y_pred_lr)
plt.title('Logistic Regression')
plt.show()
print(f"Accuracy  is {accuracy_score(y_test,y_pred_lr)}")
print(classification_report(y_test,y_pred_lr))
y_test = y_test.astype(int)
y_pred_rf = y_pred_rf.astype(int)
ConfusionMatrixDisplay.from_predictions(y_test,y_pred_rf)
plt.title('Random Forest')
plt.show()
print(f" Accuracy is {accuracy_score(y_test,y_pred_rf)}")
print(classification_report(y_test,y_pred_rf))